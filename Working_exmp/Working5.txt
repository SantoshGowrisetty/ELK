#Performing searches
#sample simple query(with query strings using _search API with q paramter)
10.
GET /ecommerce/_search?q=cashewnuts

GET /ecommerce/_search 

GET /ecommerce/_search?q=elasticsearch*

GET /ecommerce/_search
{
  "query": {
  "match": 
  {"name": "cashewnuts"}
  }
  }

try same on ecommerce3
GET /ecommerce3/_search
{
  "query": {
  "match": 
  {"title": "cashewnuts"}
  }
  }

#
11.
GET /ecommerce/_search?q=*

#two main properties
hits: total number of matched results
max_score: highest score of all matched documents
nested hits: contains an array of matched documents
_score: the score ,how well the document matched the searched query
_source : contains the document as JSON as it was added to index

GET /ecommerce/_search
{
  "query": {
  "match": 
  {"name": "cashewnuts"}
  }
  }

#using explain API
#Returns information about why a specific document matches (or doesnâ€™t match) a query.
GET /ecommerce/_explain/170
{
  "query": {
  "match": 
  {"name": "cashewnuts"}
  }
  }

GET /ecommerce/_explain/170?q=name:cashewnuts

=====================================

#Embedding boolean logic in querying
13.
GET /ecommerce/_search?q=name:(cashewnuts OR peanuts)

GET /ecommerce/_search?q=name:(cashenuts AND "why elasticsearch is Awesome")

#look for score value if value was higher in any case
GET /ecommerce/_search?q=(name:(cashewnuts OR Framework) AND status:active)

#using boolean operators
#prefix + (terms must be present) prefix -(terms must not be present)
GET /ecommerce/_search?q=name:+cashewnuts -peanuts

#using phrases while querying
14.
#Note** remember default boolean operator is OR
GET /ecommerce/_search?q=name:"Test Framework"
#order of terms does matter when searching using phrase

-------------
#Querying using DSL (Domain specific language)
#using must or must_not(to exclude) which contribute to documents to relevancy scores
15.
GET /ecommerce/_search
{
  "query": {
    "bool": {
      "must": [
        {"match": {"name": "cashewnuts"}},
        {"match": {"name": "Test Framework"}}
        ]
    }
  }
}

GET /ecommerce/_search
{
  "query": {
    "bool": {
      "must": [
        {"match": {"name": "cashewnuts"}}
        ],
      "must_not": [
        {"match": {"name": "Test Framework"}}
        ]
    }
  }
}

#using bool with should clauses(to increase relevancy scores)
#where should clause behave like logical operators
16.
GET /ecommerce/_search
{
  "query": {
    "bool": {
      "must": [
        {"match": {"name": "Test*"}}
        ],
      "should": [
        {"match": {"name": "Test Framework"}}
        ]
    }
  }
}

Another example
GET /ecommerce/_search
{
  "query": {
    "bool": {
      "must": [
        {"match": {"tags": "framework"}}
        ],
      "should": [
        {"match": {"name": "Test Framework"}}
        ]
    }
  }
}

---------
#Analyzer examples
POST _analyze
{
  "analyzer": "stop",
  "text": "hey this is test"
}


PUT ecommerce4
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_english_analyzer": {
          "type": "standard",
          "max_token_length": 4,
          "stopwords": "_english_"
        }
      }
    }
  }
}

POST ecommerce4/_analyze
{
  "analyzer": "my_english_analyzer",
  "text": "this is awesome playful smart and tokenization"
}

#ES analyzer is used to search for phrase 
#this will show what was used by analyzer when tokenizing and list of tokens
--standard analyzer
GET ecommerce/_analyze
{"analyzer": "standard",
 "text": "Test Framework"}

--stop analyzer
GET ecommerce/_analyze 
{
  "analyzer": "stop",
  "text": "Test the new Framework"
}

