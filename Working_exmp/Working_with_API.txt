#working with API
GET /_nodes/_all

GET /_nodes/_local

GET /_nodes/_master

GET _nodes/stats

GET _nodes?filter_path=**.mlockall

GET _nodes/stats/process?filter_path=**.max_file_descriptors

GET /_cat/thread_pool/search?v&h=node_name,name,active,rejected,completed

GET /_cat/allocation?v

GET /_cat/count?v

GET /_cat/fielddata?v

GET /_cat/fielddata?help

GET /_cat/health?v

GET /_cat/nodes?v

GET /_cat/indices?help

GET /_cat/indices?bytes=b&s=store.size:desc&v

GET /_cat/indices?s=store.size:desc&format=json&v

GET /_cat/indices/bankdata?s=store.size:desc&v

#using sort(s=column:desc)
GET /_cat/indices?bytes=b&s=store.size:desc&v
health status index                uuid                   pri rep docs.count docs.deleted store.size pri.store.size
green  open   population           qdtpBy_uQTiPXdqV3gtlfw   5   1        466            0    1921130         960574
green  open   ecommerce            ppC9jAzRQoOG7dOHu5-7aw   1   2         31            0     140282          46761
green  open   .kibana_1            D03f4JRaRKe5yiCFxqMJsA   1   2          5            1      61156          20391
green  open   .kibana_task_manager zybvkvCWQM2WPNorQXHqXw   1   2          2            0      21019           7007
green  open   ecommerce100         S1piCZD4TMysvUpi7CbYxw   1   1          0            0        522

or
GET /_cat/indices?s=store.size:desc&v
health status index                uuid                   pri rep docs.count docs.deleted store.size pri.store.size
green  open   population           qdtpBy_uQTiPXdqV3gtlfw   5   1        466            0      1.8mb          938kb
green  open   ecommerce            ppC9jAzRQoOG7dOHu5-7aw   1   2         31            0    136.9kb         45.6kb
green  open   .kibana_1            D03f4JRaRKe5yiCFxqMJsA   1   2          5            1     59.7kb         19.9kb
green  open   .kibana_task_manager zybvkvCWQM2WPNorQXHqXw   1   2          2            0     20.5kb          6.8kb
green  open   ecommerce100         S1piCZD4TMysvUpi7CbYxw   1   1          0            0       522b           261b

GET /_cat/indices/bankdata?s=store.size:desc&v
health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
green  open   bankdata n_1R8ZvuRuedJ5DLNS1f_Q   1   1      45212            0     29.3mb         14.6mb

or getting output in json/text/smile/yaml/cbor
GET /_cat/indices?s=store.size:desc&format=json&v

GET /_cat/shards/ecommerce?h=index,shard,prirep,dc,state,node,unassigned.reason?v

GET /_cat/shards/ecommerce2?h=index,shard,prirep,dc,node,segments.count

#This API yields a breakdown of the hot threads on each selected node in the cluster. 
#The output is plain text with a breakdown of each nodeâ€™s top hot threads.
#

<node_id>
    (Optional, string) Comma-separated list of node IDs or names used to limit returned information. 

#Query parameters

ignore_idle_threads
    (Optional, Boolean) If true, known idle threads (e.g. waiting in a socket select, or to get a 
    task from an empty queue) are filtered out. Defaults to true. 
interval
    (Optional, time units) The interval to do the second sampling of threads. Defaults to 500ms. 
snapshots
    (Optional, integer) Number of samples of thread stacktrace. Defaults to 10. 
threads
    (Optional, integer) Specifies the number of hot threads to provide information for. Defaults to 3. 
master_timeout
    (Optional, time units) Period to wait for a connection to the master node. 
    If no response is received before the timeout expires, the request fails and returns an error. Defaults to 30s. 
timeout
    (Optional, time units) Period to wait for a response. If no response is received before the timeout expires, 
    the request fails and returns an error. Defaults to 30s. 
type
    (Optional, string) The type to sample. Available options are block, cpu, and wait. Defaults to cpu. 


GET _nodes/hot_threads

GET /_cat/fielddata?v

GET /_cat/fielddata?help

#changing settings for default index
PUT /.kibana_task_manager/_settings
{
"index":{
  "number_of_replicas":3,
  "auto_expand_replicas": false
}
}

#looking at allocation/shard level information
#(assuming indexes like ecommerce were created and populated
# assuming indexes like bankdata/population were created via logstash ingestion pipeline)

GET /_cluster/state?filter_path=metadata.cluster_coordination.last_commit_config

GET /_cluster/health

GET /_cluster/allocation/explain

GET /_cat/shards?help
index                        | i,idx                          | index name                                                                              
shard                        | s,sh                           | shard name                                                                                                       
prirep                       | p,pr,primaryOrReplica          | primary or replica                                                                                               
state                        | st                             | shard state                                                                                                      
docs                         | d,dc                           | number of docs in shard                                                                                          
store                        | sto                            | store size of shard (how much disk it uses)                                                                      
ip                           |                                | ip of node where it lives                                                                                        
id                           |                                | unique id of node where it lives                                                                                 
node                         | n                              | name of node where it lives                                                                                      
sync_id                      | sync_id                        | sync id                                                                                                          
unassigned.reason            | ur                             | reason shard is unassigned                                                                                       
unassigned.at                | ua                             | time shard became unassigned (UTC)                                                                               
unassigned.for               | uf                             | time has been unassigned                                                                                         
....and so on

GET /_cat/shards/ecommerce?pretty=true

GET /_cat/shards/.kibana_1?pretty=true

GET /_cat/shards/.kibana_task_manager?pretty=true

GET /_cat/shards/population?pretty=true

#commands accepts a query string parameter h which forces only those columns to appear
GET /_cat/shards/population?h=index,shard,prirep,dc,state,node

GET /_cat/shards/population?h=index,shard,prirep,dc,state,node,unassigned.reason
--------------------------------
#Gathering more details
GET /_cat/master?v

id                     host           ip             node
1-nbfWO7Rr6Xj4oDHojM0A 192.168.251.48 192.168.251.48 data1

GET /_cat/master?help
id   |   | node id    
host | h | host name  
ip   |   | ip address 
node | n | node name 


#To find the largest index in your cluster (storage used by all the shards, not number of documents). 
use /_cat/indices API . You only need to add three things to the API request:
    The bytes query string parameter with a value of b to get byte-level resolution.
    The s (sort) parameter with a value of store.size:desc to sort the output by shard storage in descending order.
    The v (verbose) parameter to include column headings in the response.

#a snapshot of the number of shards allocated to each data node and their disk space
GET /_cat/allocation?v
shards disk.indices disk.used disk.avail disk.total disk.percent host           ip             node
     5      381.3kb     7.6gb     23.5gb     31.1gb           24 192.168.251.63 192.168.251.63 data3
     6      478.1kb    13.1gb       18gb     31.1gb           42 192.168.251.47 192.168.251.47 master
     5      649.2kb     7.4gb     23.6gb     31.1gb           24 192.168.251.49 192.168.251.49 data2
     5        585kb     9.3gb     21.8gb     31.1gb           29 192.168.251.48 192.168.251.48 data1

#quick access to a document count for a data stream, an index, or an entire cluster.
#The document count only includes live documents, not deleted documents which have not yet been removed by the merge process.

GET /_cat/count/bankdata?v
epoch      timestamp count
1606334551 20:02:31  466

#for overall cluster
GET /_cat/count?v

#the amount of heap memory currently used by the field data cache on every data node in the cluster.
heap memory size information all fields.
GET /_cat/fielddata?v
id                     host           ip             node  field size
E-bILjQgSnyHmHNwpd-LZg 192.168.251.63 192.168.251.63 data3 type  584b
E-bILjQgSnyHmHNwpd-LZg 192.168.251.63 192.168.251.63 data3 _id   324b

#health of cluster
GET /_cat/health?v
epoch      timestamp cluster   status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
1606335195 20:13:15  mycluster green           4         4     21   9    0    0        0             0                  -                100.0%

GET /_cat/health?v
cluster   status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
mycluster green           4         4     21   9    0    0        0             0                  -                100.0%

GET /_cluster/health
{
  "cluster_name" : "mycluster",
  "status" : "green",
  "timed_out" : false,
  "number_of_nodes" : 4,
  "number_of_data_nodes" : 4,
  "active_primary_shards" : 9,
  "active_shards" : 21,
  "relocating_shards" : 0,
  "initializing_shards" : 0,
  "unassigned_shards" : 0,
  "delayed_unassigned_shards" : 0,
  "number_of_pending_tasks" : 0,
  "number_of_in_flight_fetch" : 0,
  "task_max_waiting_in_queue_millis" : 0,
  "active_shards_percent_as_number" : 100.0
}

GET /_cluster/health/ecommerce?level=shards
{
  "cluster_name" : "mycluster",
  "status" : "green",
  "timed_out" : false,
  "number_of_nodes" : 4,
  "number_of_data_nodes" : 4,
  "active_primary_shards" : 1,
  "active_shards" : 3,
  "relocating_shards" : 0,
  "initializing_shards" : 0,
  "unassigned_shards" : 0,
  "delayed_unassigned_shards" : 0,
  "number_of_pending_tasks" : 0,
  "number_of_in_flight_fetch" : 0,
  "task_max_waiting_in_queue_millis" : 0,
  "active_shards_percent_as_number" : 100.0,
  "indices" : {
    "ecommerce" : {
      "status" : "green",
      "number_of_shards" : 1,
      "number_of_replicas" : 2,
      "active_primary_shards" : 1,
      "active_shards" : 3,
      "relocating_shards" : 0,
      "initializing_shards" : 0,
      "unassigned_shards" : 0,
      "shards" : {
        "0" : {
          "status" : "green",
          "primary_active" : true,
          "active_shards" : 3,
          "relocating_shards" : 0,
          "initializing_shards" : 0,
          "unassigned_shards" : 0
        }
      }
    }
  }
}

#similarly
GET /_cluster/health/bankdata?level=shards

#cat indices API to get the following information for each index in a cluster:
   Shard count
   Document count
   Deleted document count
   Primary store size
   Total store size of all shards, including shard replicas

These metrics are retrieved directly from Lucene.
GET /_cat/indices/popu*?v&s=index
health status index      uuid                   pri rep docs.count docs.deleted store.size pri.store.size
green  open   population qdtpBy_uQTiPXdqV3gtlfw   5   1        466            0      1.8mb          938kb


