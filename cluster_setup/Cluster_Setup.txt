#Notes
#update /etc/elasticsearch/elasticsearch.yml in each node

####ON MASTER NODE#####
cluster.name: mycluster
node.name: master
#which network interfaces ES binds to
network.host:ipaddress (by default set to _local_)
             (we can set to an array (_local_,_site_)
#2 ports: 9300-Transport network how ES talks to other nodes in cluster
          9200-REST API or HTTP end point

http.port: 9200
transport.port: 9300

#add 2 more properties
node.master: true
node.data: false

#make sure ElasticSearch works seamlessly, enable it on boot and Start ElasticSearch.
$sudo systemctl enable elasticsearch.service
$sudo systemctl start elasticsearch.service
$sudo service elasticsearch status

#test
$curl localhost:9200

######ON DATANODES#####
cluster.name: mycluster
node.name: data1

#which network interfaces ES binds to
network.host:ipaddress (by default set to _local_)
             (we can set to an array [_local_,_site_]
#2 ports: 9300-Transport network how ES talks to other nodes in cluster
          9200-REST API or HTTP end point
http.port: 9200
transport.port: 9300

#add 2 more properties
node.master: false
node.data: true

#discovery settings
--an Array of nodes to which this node can connect to ,to get information about cluster.
--typically best practise to list all master eligible nodes here
discovery.zen.ping.unicast.hosts:["ipaddress of master"]
#the below setting tells how many master nodes must exist for the cluster,in order to avoid split-brain
discovery.zen.minimum_master_nodes: set majority quorum value

#make sure ElasticSearch works seamlessly, enable it on boot and Start ElasticSearch.
$sudo systemctl enable elasticsearch.service
$sudo systemctl start elasticsearch.service
$sudo service elasticsearch status

#test
$curl localhost:9200/_cat/nodes
$curl localhost:9200/_cat/nodes?v

#######ON OTHER DATANODES#####
(SAME CONFIG AS NODE 2)


